@page "/clients/edit/{Id:long}"
@attribute [Authorize]
@using MinimalApiAuth.Domain
@using System.Text.Json
@using System.Text
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveWebAssembly

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Client</h2>
<hr />
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (Client == null)
{
    <p>
        Loading data...
    </p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Client" OnValidSubmit="UpdateClient" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Client.Id" value="@Client.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Client.FirstName" class="form-control" />
                    <ValidationMessage For="() => Client.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Client.LastName" class="form-control" />
                    <ValidationMessage For="() => Client.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Client.Email" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Client.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone:</label>
                    <InputText id="phone" @bind-Value="Client.Phone" class="form-control" />
                    <ValidationMessage For="() => Client.Phone" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/clients">Back to List</a>
</div>

@code {
    [Parameter]
    public long Id { get; set; }

    public string? user;
    public string? errorMessage;

    [SupplyParameterFromForm]
    private Client? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState?.User?.Identity?.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Client = await GetClient();
            if (Client is null)
                NavigationManager.NavigateTo("notfound");

            StateHasChanged();
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateClient()
    {
        if (string.IsNullOrEmpty(user))
        {
            Client = null;
            return;
        }

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Put, $"/api/Client/{Id}");

        string json = JsonSerializer.Serialize(Client);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        request.Content = content;

        HttpResponseMessage responseMessage = await httpClient.SendAsync(request);
        responseMessage.EnsureSuccessStatusCode();

        NavigationManager.NavigateTo("/clients");
    }

    public async Task<Client> GetClient()
    {
        if (string.IsNullOrEmpty(user))
            return null;

        Client rtn = null;
        try
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, $"/api/Client/{Id}");
            HttpResponseMessage responseMessage = await httpClient.SendAsync(request);
            responseMessage.EnsureSuccessStatusCode();
            rtn = await responseMessage.Content.ReadFromJsonAsync<Domain.Client>();

            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Loading error: {ex.Message}";
        }

        StateHasChanged();

        return rtn;
    }
}