@page "/clients/delete/{Id:long}"
@using System.Text.Json
@using System.Text
@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Client</h2>
    <hr />
    @if (client is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@client.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@client.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@client.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@client.Phone</dd>
        </dl>
        <EditForm method="post" Model="client" OnValidSubmit="DeleteClient" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(client is null)">Delete</button> |
            <a href="/clients">Back to List</a>
        </EditForm>
    }
</div>

@code {
    [Parameter] public long Id { get; set; }

    private Client? client;

    protected override async Task OnInitializedAsync()
    {
        client = await GetClient();
        if (client is null)
            NavigationManager.NavigateTo("notfound");
    }

    public async Task<Domain.Client?> GetClient()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, $"/api/Client/{Id}");
        HttpResponseMessage responseMessage = await httpClient.SendAsync(request);
        responseMessage.EnsureSuccessStatusCode();
        var response = await responseMessage.Content.ReadFromJsonAsync<Domain.Client>();
        return response;
    }

    private async Task DeleteClient()
    {
        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Delete, $"/api/Client/{Id}");
        HttpResponseMessage responseMessage = await httpClient.SendAsync(request);
        responseMessage.EnsureSuccessStatusCode();

        NavigationManager.NavigateTo("/clients");
    }
}
