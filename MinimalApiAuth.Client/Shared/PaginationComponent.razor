@typeparam TItem

<div>
    <table class="table table-bordered table-striped table-hover">
        <thead class="table-primary">
            @ChildContentHeader
        </thead>
        <tbody>
            @if (PaginatedData != null && PaginatedData.Count() > 0)
            {
                @foreach (var item in PaginatedData)
                {
                    @ChildContentRow(item)
                }
            }
            else
            {
                @NoDataContent
            }
        </tbody>
    </table>

    <div class="pagination-controls">
        <div class="align-item-start pages">
            <label for="pageSize">Page Size: </label>
            <select @bind="PageSize" id="pageSize">
                @foreach (var size in PageSizes)
                {
                    <option value="@size">@size</option>
                }
            </select>
        </div>

        <div class="align-item-end">
            <button @onclick="PreviousPage" disabled="@IsPreviousDisabled">Previous</button>

            @foreach (var pageNumber in Enumerable.Range(1, TotalPages))
            {
                <button @onclick="() => GoToPage(pageNumber)" class="@(CurrentPage == pageNumber ? "active" : "")">
                    @pageNumber
                </button>
            }

            <button @onclick="NextPage" disabled="@IsNextDisabled">Next</button>
        </div>
    </div>

</div>

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public int DefaultPageSize { get; set; } = 10;
    [Parameter] public RenderFragment? ChildContentHeader { get; set; }
    [Parameter] public RenderFragment<TItem>? ChildContentRow { get; set; }
    [Parameter] public RenderFragment? NoDataContent { get; set; }

    private int PageSize { get; set; }
    private List<TItem> PaginatedData => Items.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    private int CurrentPage { get; set; } = 1;

    private readonly int[] PageSizes = new[] { 5, 10, 20, 50 };

    protected override void OnInitialized()
    {
        PageSize = DefaultPageSize;
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
    }

    private int TotalPages => (int)Math.Ceiling(Items.Count() / (double)PageSize);

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage == TotalPages;
}